#summary The SADI "Hello, World!" service
#sidebar SADITrail_Contents

= Running Example: The SADI "Hello, World!" Service =

To illustrate the different aspects of the SADI protocol in a concrete manner, we will frequently make reference to the SADI "Hello, World!" service located at http://sadiframework.org/examples/hello. The purpose of this section is to describe the behaviour of this service and at the same time to provide a brief, non-normative introduction to the key aspects of the SADI protocol.

The SADI "Hello, World!" service consumes one or more input instances representing people with names (e.g. "Guy Incognito") and returns corresponding output instances representing greetings for each person (e.g. "Hello, Guy Incognito!"). The following shows an example input RDF document for the service, in N3:

{{{
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix hello: <http://sadiframework.org/examples/hello.owl#> .
@prefix input: <http://sadiframework.org/data/examples/hello-input.n3#> .

input:GuyIncognito 
    a hello:NamedIndividual;
    foaf:name "Guy Incognito" .

input:HomerSimpson
    a hello:NamedIndividual;
    foaf:name "Homer Simpson" .
}}}

In response, the service generates the following output RDF document:

{{{
@prefix hello: <http://sadiframework.org/examples/hello.owl#> .
@prefix input: <http://sadiframework.org/data/examples/hello-input.n3#> .

input:GuyIncognito 
    a hello:GreetedIndividual;
    hello:greeting "Hello, Guy Incognito!" .

input:HomerSimpson
    a hello:GreetedIndividual;
    hello:greeting "Hello, Homer Simpson!" .
}}}

In this example, the input RDF document contains two input instances with the URIs `input:GuyIncognito` and `input:HomerSimpson`. Each input instance is processed independently by the service, and so the same result could be generated by invoking the service twice with the input graphs for Guy Incognito and Homer Simpson separately, and afterwords performing an RDF-merge on the two output RDF documents. The input instances are identified by the service as those URIs having an `rdf:type` matching the service's _input OWL class_ (`hello:NamedIndividual`). The purpose of the input OWL class is to describe the expected structure of the input instances. More will be said about the purpose and design of the input OWL class in [InputAndOutputOWLClasses#The_Input_OWL_Class The Input OWL Class]. 

Analogously to the case for input instances, each output instance in the output RDF document is assigned an `rdf:type` equal to the URI of the service's _output OWL class_ (`hello:Greetedindividual`). The purpose of the _output OWL class_ is to describe the expected structure of the output instances generated by the service.  Comparing the input and output RDF documents, the reader will observe that the URI of each output instance is equal to URI of its corresponding input instance (`input:GuyIncognito` and `input:HomerSimpson`, respectively).  This is a general requirement for SADI services that ensures that related input and output instances are always explicitly linked.  As a result, SADI clients are able to merge the input and output RDF documents from a service invocation into a single, coherent RDF graph that captures the relationships between the input and output data.  For example, a client could load the two RDF documents above into a triple store, and then pose queries against the triple store such as "What is the greeting for Homer Simpson?". 
