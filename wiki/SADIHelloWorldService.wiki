#summary The SADI "Hello, World!" service

= Running Example: The SADI "Hello, World!" Service =

To illustrate the different aspects of the SADI protocol in a concrete manner, we will frequently make reference to the SADI "Hello, World!" service located at http://sadiframework.org/examples/hello. The purpose of this section is to describe the behaviour of this service and at the same time to provide a brief, non-normative introduction to the key aspects of the SADI protocol.

The SADI "Hello, World!" service consumes one or more input RDF graphs representing people with names (e.g. "Guy Incognito") and for each input RDF graph returns a corresponding output RDF graph with a greeting for that person (e.g. "Hello, Guy Incognito!"). The following shows an example input RDF document for the service, in N3:

{{{
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix hello: <http://sadiframework.org/examples/hello.owl#> .
@prefix input: <http://sadiframework.org/data/examples/hello-input.n3#> .

input:GuyIncognito 
    a hello:NamedIndividual;
    foaf:name "Guy Incognito" .

input:HomerSimpson
    a hello:NamedIndividual;
    foaf:name "Homer Simpson" .
}}}

Upon processing the input, the service generates the following output RDF document:

{{{
@prefix hello: <http://sadiframework.org/examples/hello.owl#> .
@prefix input: <http://sadiframework.org/data/examples/hello-input.n3#> .

input:GuyIncognito 
    a hello:GreetedIndividual;
    hello:greeting "Hello, 'Guy Incognito'!" .

input:HomerSimpson
    a hello:GreetedIndividual;
    hello:greeting "Hello, 'Homer Simpson'!" .
}}}

In this example, the input RDF document contains two input graphs which are rooted at the URIs `input:GuyIncognito` and `input:HomerSimpson`. Each input graph may be processed independently by the service, and so the same result could be generated by invoking the service twice with the input graphs for Guy Incognito and Homer Simpson respectively, and afterwords performing an RDF-merge on the results. In general, we will refer to the root URIs of the input graphs as the _input URIs_ for a service invocation. The input URIs are identified by the service as those URIs having an `rdf:type` matching the service's _input OWL class_ (`hello:NamedIndividual`). The purpose of the input OWL class is to describe the expected structure of the input RDF graphs. More will be said about the purpose and design of the input OWL class in [InputOWLClass]. 

Examining the output RDF, the reader will observe that the root URI of each output graph matches the root URI of its corresponding input graph (`input:GuyIncognito` and `input:HomerSimpson`, respectively). In other words, the root URI of each output graph is an input URI.  This is a general requirement for SADI services which ensures that the RDF data generated by a service is always connected to the input RDF data, such that the input and output RDF documents would produce a single, connected graph if they were combined with an RDF-merge. Analogously to the treatment of input graphs, the root of each output graph is assigned an `rdf:type` that is the URI of the service's _output OWL class_ (`hello:Greetedindividual`). The purpose of the _output OWL class_ is to describe the expected structure of the output RDF graphs generated by the service. Given that each output RDF graph is rooted at its corresponding input URI, the _output OWL class_ effectively describes the graph structure(s) that are attached to each input URI as a result of the service invocation.