#summary Motivation and design goals for SADI
#sidebar SADITrail_Contents

= Motivation and Goals =

== Motivation ==

The primary motivation for the development of SADI is the growing complexity of discoverying, accessing, and integrating public data and software in the domain of bioinformatics.  While there are currently thousands of interrelated bioinformatics databases and software tools freely available on the web, they are published using a plethora of incompatible data models, schemas, and software interfaces that impedes their combined use. The authors sought to develop a set of best practices for publishing data and software resources that would simultaneously offer the benefits of Semantic Web standards and technologies, such as the ability to automatically merge data sets and to automatically compute logical inferences from data in a standardized manner.

While SADI has been motivated by bioinformatics use cases, there is nothing that prevents its application to other domains. It is a generic web service standard that is potentially useful in any scenario where integrating online data and/or software resources is required.

== Design Goals ==

=== Interoperability with the Semantic Web ===

One of the primary goals of SADI is to create web services that are compatible with the Semantic Web.  In particular, it is desirable that services should be able to exchange data directly with various consumers and producers of RDF data such as triple stores, static RDF documents, OWL reasoners, and RDF browsers. For this reason, SADI services consume a standard RDF document as input and generate a standard RDF document as output. 

Another key point of compatibility with the Semantic Web is the use of OWL to define the requirements for the input data, output data, and execution parameters of a service.  This permits the use of an OWL reasoner as the main vehicle for data and service matchmaking tasks, such as:

  * identifying services that can consume a subset of a given RDF graph as input
  * extracting minimal input graphs for a service from a given RDF graph
  * matching the output interface of one service to the input interface of another service, in order to create service execution chains (workflows) 
  
=== Stateless Services ===

The scope of SADI is limited to stateless services so that services and clients can be implemented in a straightforward manner, at the expense of certain types of advanced applications.  The set of stateless services includes services that perform any type of data retrieval or data analysis, but excludes services that effect changes in the real world. A common example of the latter type of service would be a service that makes a withdrawal from a bank account. Previous Semantic Web Service standards such as WSMO and OWL-S have been developed to model such stateful services. However, the formal description of stateful services is complex, and the design of software agents to coordinate such services is an ongoing research problem.    

=== Batch Processing of Inputs ===

In order to minimize overhead due to network latency, it should be possible to group independent inputs for a service into a single request, and to receive the corresponding outputs in a single response. In SADI, the input RDF document for a service invocation may contain any number of input instances which constitute connected components of the input RDF graph.  Likewise, the output RDF document for a service invocation may contain any number of output instances which constitute connected components of the output RDF graph.

=== Support for Long-Running Services ===

The processing time of a service should not be limited to the lifetime of a TCP connection. Asynchronous SADI services support long-running computations by means of client polling and HTTP redirects, as described in [AsynchronousServices Asynchronous Services].  

=== Explicit Relationship Between Service Input and Output ===

It is desirable to ensure that related input and output RDF data from a service invocation are explicitly linked by one or more triples.  This saves a client from the task of tracking input/output relationships on its own, and ensures that the RDF produced by service invocations forms a connected graph that is queriable in a meaningful manner.  The link(s) between related input and output RDF graphs are guaranteed in SADI by the fact that they share a common URI. Each output RDF graph must be rooted at the same URI as its corresponding input RDF graph.  This constraint is demonstrated concretely in [SADIHelloWorldService Running Example: The SADI "Hello, World!" Service] and is described more formally in [InputAndOutputOWLClasses#The_Output_OWL_Class The Output OWL Class].

=== Minimal Constraints on Data Modeling === 

Aside from the constraint of the previous section, SADI does provide any rules about how service input and output data should be modeled in RDF. Service providers are free to encode the data using any OWL or RDFS ontologies deemed suitable. Further, the input and output RDF documents for a service invocation consist only of data that is consumed or generated by the service, respectively. There are no SADI-specific messaging structures within the input/output RDF documents.  
 