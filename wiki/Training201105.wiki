#summary Scratch page for May 2011 training course

=Scratch page for May 2011 training course=

==Suggested URL for ontology==
 http://cstomcat.unbsj.ca/sadi-fred##/cbrass1105.owl

==URLs for test input/output==
  * http://sadiframework.org/training1105/cbrass201105-input.rdf
  * http://sadiframework.org/training1105/cbrass201105-input-untyped.rdf

==SPARQL query to find drugs==
{{{
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX pharm: <http://sadi-ontology.semanticscience.org/pharmacogenomics-primitive-sadi.owl#>
SELECT *
WHERE {
  ?disease pharm:hasIdentifier ?id .
  ?id pharm:hasValue '%s' .
  ?treatment pharm:targets ?disease .
  ?treatment pharm:hasAgent ?agent .
  ?agent rdf:type pharm:Drug
}
}}}

==Mapping==

{{{
@prefix lmap:    <http://jena.hpl.hp.com/2004/08/location-mapping#> .

[]    lmap:mapping
              [ lmap:altPrefix "file:///Users/luke/Documents/Ontologies/" ;
                lmap:prefix "http://sadi-ontology.semanticscience.org/"
              ] .

[]    lmap:mapping
              [ lmap:altName "file:///Users/luke/Documents/Ontologies/biomedical-measure-primitive.owl" ;
                lmap:name "http://ontology.dumontierlab.com/biomedical-measure-primitive"
              ] .
              
[]    lmap:mapping
              [ lmap:altPrefix "file:///Users/luke/Code/eclipse-3.6.1/sadi.examples/src/main/webapp/" ;
                lmap:prefix "http://sadiframework.org/examples/"
              ] .
}}}

==Source code==
{{{
private static final String query = 
        "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" + 
        "PREFIX pharm: <http://sadi-ontology.semanticscience.org/pharmacogenomics-primitive-sadi.owl#>\n" + 
        "SELECT *\n" + 
        "WHERE {\n" + 
        "  ?disease pharm:hasIdentifier ?id .\n" + 
        "  ?id pharm:hasValue '%s' .\n" + 
        "  ?treatment pharm:targets ?disease .\n" + 
        "  ?treatment pharm:hasAgent ?agent .\n" + 
        "  ?agent rdf:type pharm:Drug\n" + 
        "}";
	
	@Override
	public void processInput(Resource input, Resource output)
	{
		/* your code goes here
		 * (add properties to output node based on properties of input node...)
		 */
		Resource identifier = input.getPropertyResourceValue(Vocab.hasIdentifier);
		String idString = identifier.getProperty(Vocab.hasValue).getString();
		
		OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM_MICRO_RULE_INF);
		model.read(GetDrugsByDisease.class.getResourceAsStream("/pharmacogenomics-depression-sadi.owl"), "");
		QueryExecution qe = QueryExecutionFactory.create(String.format(query, idString), model);
		ResultSet resultSet = qe.execSelect();
		while (resultSet.hasNext()) {
				QuerySolution binding = resultSet.nextSolution();
				RDFNode drug = binding.get("drug");
				output.addProperty(Vocab.hasMedication, drug);
  		 }
		qe.close();
	}
}}}