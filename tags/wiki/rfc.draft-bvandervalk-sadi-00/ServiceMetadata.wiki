#summary Metadata specification for SADI services
#sidebar SADITrail_Contents

= Service Metadata =

The metadata for a SADI service provides information that is potentially helpful to human and/or software clients attempting to use the service. All provider-specified metadata for a SADI service MUST be retrievable as an RDF document by issuing an HTTP GET request to the service URL. Within the RDF document, all metadata items MUST be represented as part of a single, connected RDF graph whose root URI is the URL of the service. 

The metadata graph MUST include the following items:
 
  * _input OWL class_ -- an OWL class describing the expected structure of the input RDF graphs consumed by the service
  * _output OWL class_ -- an OWL class describing the expected structure of the output RDF graphs generated by the service 

If the service has one or more execution parameters, the metadata graph MUST also include:

  * _parameter OWL class_ -- an OWL class describing execution parameters for the service
  * _default parameter instance_ -- an instance of the parameter OWL class which provides default values for the service execution parameters

The following items are optional:

  * _service name_ -- a human readable label for the service
  * _description_ -- a human readable description of the service functionality
  * _contact e-mail address_ -- an e-mail address where the provider of the service may be contacted
  * _service type URI(s)_ -- one or more rdf:type URIs indicating the type of service.  These URIs may be used to categorize the service by a wide variety of criteria, such as the task performed, the algorithm utilized, or the intended users of the service. 
  * _unit test(s)_ -- one or more input RDF graph(s) that MUST constitute valid input(s) to the service. The expected output RDF graphs corresponding to these input graphs MAY also be provided. 
  * _authoritative flag_ -- a boolean value that MUST be true if the person or organization hosting the service is also the author or owner of the data underlying the service, or the author or curator of the software which will generate the service output.  If a SADI service acts as an interface to third party data or software, the value of the authoritative flag MUST be false.  This is to provide some Quality-of-Service information in cases where multiple services report to provide the same output data.    

In addition, any other items deemed useful to clients of the service MAY be included in the metadata graph.

== Retrieving Service Metadata ==

An RDF document containing the metadata graph MUST be retrievable by an HTTP GET request to the service URL.  

The GET request MAY include an `Accept` header indicating the desired RDF serialization format for the response document.  A SADI service MUST support content types of `text/rdf+n3` for N3 and `application/rdf+xml` for RDF/XML, and MAY support additional content types for these formats or for any other RDF serialization formats.  In the event of an omitted, unrecognized, or unsupported content type, the default content type used for the response MUST be RDF/XML.
 
== Representing Service Metadata in RDF ==

The schema for the metadata graph is beyond the current scope of the SADI specification. 

At the time of writing, all SADI services and SADI-related tools known to the authors use the myGrid/Moby service ontology `[`[InformativeReferences#myGrid/Moby myGrid/Moby]`]` to encode the service metadata graph.  For illustrative purposes, the service metadata graph for a parameterized version of the "Hello, World!" service (http://sadiframework.org/examples/hello-param) is shown below in N3 format.

{{{
@prefix protege-dc: <http://protege.stanford.edu/plugins/owl/dc/protege-dc.owl#> .
@prefix mygrid: <http://www.mygrid.org.uk/mygrid-moby-service#> .
@prefix hello: <http://sadiframework.org/examples/hello.owl#> .
@prefix test: <http://sadiframework.org/examples/t/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://sadiframework.org/examples/hello-param>
  a mygrid:serviceDescription ;
  
  #----------------------------------------
  # Service Name 
  #----------------------------------------

  mygrid:hasServiceNameText
      "ParamaterizedHelloWorld"^^xsd:string ;

  #----------------------------------------
  # Service Description
  #----------------------------------------

  mygrid:hasServiceDescriptionText
      "A \"Hello, world!\" service where the output language is specified in a parameter"^^xsd:string ;

  #----------------------------------------
  # Contact E-mail Address, Authoritative Flag
  #----------------------------------------

  mygrid:providedBy
    [ a mygrid:organisation ;
      protege-dc:creator "person@organization.com"^^xsd:string ;
      mygrid:authoritative "false"^^xsd:boolean
    ] ;

  mygrid:hasOperation
    [ a mygrid:operation ;

      #----------------------------------------
      # Input OWL Class
      #----------------------------------------

      mygrid:inputParameter
          [ a mygrid:parameter ;
            mygrid:objectType hello:NamedIndividual
          ] ;

      #----------------------------------------
      # Parameter OWL Class, Default Parameter Graph
      #----------------------------------------

      mygrid:inputParameter
          [ a mygrid:secondaryParameter ;
            mygrid:objectType hello:SecondaryParameters ;
            mygrid:hasDefaultValue 
              [ a hello:SecondaryParameters ;
                hello:lang "en"^^xsd:string
              ] 
          ] ;

      #----------------------------------------
      # Output OWL Class
      #----------------------------------------

      mygrid:outputParameter
          [ a mygrid:parameter ;
            mygrid:objectType hello:GreetedIndividual
          ] ;

      #----------------------------------------
      # Unit Test 
      # (test input/output RDF included directly)
      #----------------------------------------

      mygrid:hasUnitTest
          [ a mygrid:testCase ;
            mygrid:exampleInput
              [ a hello:InputClass ;
                foaf:name "Guy Incognito"
              ] ;
            mygrid:exampleOutput
              [ a hello:OutputClass ;
                hello:greeting "Hello, Guy Incognito!"
              ] 
          ] ;

      #----------------------------------------
      # Unit Test 
      # (test input/output RDF in external documents)
      #----------------------------------------

      mygrid:hasUnitTest
          [ a mygrid:testCase ;
            mygrid:exampleInput test:hello-param-input.rdf ;
            mygrid:exampleOutput test:hello-param-output.rdf
          ] 

    ] .
}}}