[%# A template for a service implementation code
      (an empty implementation of a service)
    ============================================

    Expected/recognized parameters:

      base               ... a service base definition
                             (type SADI:::Service::Instance)
	  module_name        ... a scalar string representing the module name
      impl               ... a service implementation details
                             (type HASH)
      static_impl        ... if true, the static option will be enabled
      is_async           ... if true, generate async service, otherwise generate sync
      do_owl2perl        ... if true, owl2perl module usage will be inserted into impl
      owl2perl_datatypes ... an array reference of datatype properties used by output class
      owl2perl_objects   ... an array reference of object properties used by output class
      owl2perl_outclass  ... the output class owl2perl module name
      ref                ... a CODE returning ref() of the given argument
-%]
#-----------------------------------------------------------------
# Service name: [% base.ServiceName %]
# [% IF is_async == 1 %]   An asynchronous service[% ELSE %]   A synchronous service[% END %]
# Authority:    [% base.Authority %]
# Created:      [% USE Date (format = '%d-%b-%Y %H:%M:%S %Z') %][% Date.format %]
# Contact:      [% base.Provider %]
# Description:  [% USE description = String (base.Description) %]
#               [%- description.replace("\n", "\n#\t") %]
#-----------------------------------------------------------------

package [% impl.package %];

use FindBin qw( $Bin );
use lib $Bin;

#-----------------------------------------------------------------
# This is a mandatory section - but you can still choose one of
# the two options (keep one and commented out the other):
#-----------------------------------------------------------------
use SADI::Base;
[%- IF static_impl == 1 %][% opt1 = '#'; opt2 = '' %][% ELSE %][% opt1 = ''; opt2 = '#' %][% END %]
# --- (1) this option loads dynamically everything
[% opt1 %]BEGIN {
[% opt1 %]    use SADI::Generators::GenServices;
[% opt1 %][% IF is_async == 1 %]    new SADI::Generators::GenServices->async_load( 
[%- ELSE -%]    new SADI::Generators::GenServices->load( [%- END %]
[% opt1 %]	 service_names => ['[% base.ServiceName %]']);
[% opt1 %]}

# --- (2) this option uses pre-generated module
#  You can generate the module by calling a script:
[%- IF is_async == 1 %]
 #    sadi-generate-services -B [% base.ServiceName %]
[%- ELSE %]
#    sadi-generate-services -b [% base.ServiceName %]
[%- END %]
#  then comment out the whole option above, and uncomment
#  the following line (and make sure that Perl can find it):
[%- IF is_async == 1 %]
[% opt2 %]use SADI::Generators::GenServices;[% END %]
[% opt2 %]use [% module_name %];

# (this to stay here with any of the options above)
use vars qw( @ISA );
@ISA = qw( [% module_name %] );
use strict;

# add vocabulary use statements
use SADI::RDF::Predicates::DC_PROTEGE;
use SADI::RDF::Predicates::FETA;
use SADI::RDF::Predicates::OMG_LSID;
use SADI::RDF::Predicates::OWL;
use SADI::RDF::Predicates::RDF;
use SADI::RDF::Predicates::RDFS;

#-----------------------------------------------------------------
# process_it
#    This method is called for every client request.
#    Input data in the array reference, $values, are of type 
#      RDF::Core::Resource.
#
#      RDF::Core::Resource contains the following methods:
#         * new($URI)
#         * getURI - gets the URI for your Resource
#         * getNamespace - gets the namespace of the Resource
#         * getLocalValue - gets the value of the Resource
#         * equals($other) - checks equality of 2 Resources
#
#    $core is a reference to a SADI::RDF::Core object.
#
#    SADI::RDF::Core contains the following methods: 
#         * Signature() - gets the SADI::Service::Instance 
#               object backing this SADI::RDF::Core reference
#         * getInputNodes() - returns the RDF::Core::Resource 
#               nodes representing the input based on the 
#               input class for this service
#         * getStatements -
#            get an array of RDF::Core::Statements given a subject, object, and/or predicate from the input data
#            
#              %args
#                  subject   => the URI of the subject for which you want to retrieve statements for
#                  object    => the URI of the object for which you want to retrieve statements for
#                  predicate => the URI of the predicate for which you want to retrieve statements for
#             
#              B<subject, object and predicate are all optional.>
#              
#              returns
#                  a reference to an array of RDF::Core::Statements that match the given subject, object and predicate
#         * getObjects
#                get an array of RDF::Core::Resource nodes given a subject and predicate from the input data
#                
#                  %args
#                      subject   => the URI of the subject for which you want to retrieve objects for
#                      predicate => the URI of the predicate for which you want to retrieve objects for
#                  
#                  B<subject, object and predicate are all optional.>
#                  
#                  returns
#                      a reference to an array of RDF::Core::Resource that match the given subject and predicate
#         * addOutputData
#                add an output triple to the model; the predicate of the triple
#                  is automatically extracted from the ServicePredicate.
#                  
#                  You can pass a URI or an RDF::Core::Resource as the "value" argument.  
#                  The node is automatically rdf:typed as the OutputClass if you include
#                  the "typed_as_output" argument as true.
#                  
#                  If you pass a "value" that looks like a URI, then this routine WILL ASSUME
#                  THAT YOU WANT IT TO BE AN OBJECT, NOT A SCALAR VALUE.  To over-ride this,
#                  set the boolean "force_literal" argument.  If you pass an RDF::Core::Resource
#                  together with the force_literal argument, the URI of the RDF::Core::Resource
#                  will be extracted and added as a literal value rather than as an object.
#                
#                  args
#                     node => $URI  (the URI string or RDF::Core::Resource of the subject node
#                             or a subclass of OWL::Data::OWL::Class )
#                       NOTE:
#                          if $URI->isa(OWL::Data::OWL::Class) created via
#                          sadi-generate-datatypes script then all RDF statements
#                          for this resource are added to our model and all 
#                          other arguments are ignored!
#                     value => $val  (a string value)
#                     predicate => $URI (required - the predicate to put between them.  
#                                        unless your $URI->isa(OWL::Data::OWL::Class))
#                     typed_as_output => boolean (if present output is rdf:typed as output class)
#                     force_literal => boolean
#                     label => $label (string); label for value node, only if value is a URI
#
# Make sure to read the perldoc for up to date information on any module mentioned here!
#-----------------------------------------------------------------
sub process_it {
    my ($self, $values, $core) = @_;
    # empty data, then return
    return unless $values;

    my @inputs = @$values;
    # iterate over each input
    foreach my $input (@inputs) {
    	# NOTE: this fills in the log file
    	$LOG->info ("Input data (" 
    		. $input->getURI ? $input->getURI : "no_uri" 
    		. ")"
    		. $input->getLocalValue ? ":\n" . $input->getLocalValue : ""
    		."")
      		if defined $input;
    	# do something with $input ... (sorry, can't help with that)
	
        # fill in the output nodes - this is what you need to do!
        # for example ...
[%- IF do_owl2perl == 1 %]
            require [%owl2perl_outclass%];
            my $outClass = 
                [%owl2perl_outclass%]->new(
                    sprintf('%s', $input->getURI)
                );
[%- FOREACH prop IN owl2perl_datatypes %]
            # set the '[%prop%]' property
            $outClass->add_[%prop%]('some scalar value');
[%- END %]
[%- SET ops = { }-%]
[%- FOREACH prop IN owl2perl_objects %]
            # set the '[% prop.item('prop') %]' property on the class [% prop.item('mod') %]
            $outClass->add_[% prop.item('prop') %](
                [% prop.item('mod') %]->new(sprintf('http://sadiframework.org/uri#%s_%s', '[% prop.item('prop') %]', $output))
            );
[%- END %]
            # add our outclass to the service output
            $core->addOutputData(
                node => $outClass,
            );
[%- ELSE %]
        foreach my $output (0..2) {
         	$core->addOutputData(
        		node => $input->getURI,
                value => "$output",
        	    predicate => "http://sadiframework.org/ontologies/predicates.owl#somePredicate$output"
        	);
        }
[%- END %]
[%- IF is_async == 1 %]
            # mimic a long running service; sleep 15 seconds per addition of output
            sleep(15); 
[%- END %] 
    }
}

[%- IF do_owl2perl == 1 %][% SET ops = []%]
# owl2perl use statements
[%- FOREACH prop IN owl2perl_objects -%]
[%- ops.push(prop.item('mod'))-%]
[%- END -%]
[%- ops = ops.unique.sort -%]
[%- FOREACH o IN ops%]
use [% o %];
[%- END %]
[%- END %]

1;
__END__

=head1 NAME

[% impl.package %] - a SADI service

=head1 SYNOPSIS

 # the only thing that you need to do is provide your
 # business logic in process_it()!
 #
 # This method consumes an array reference of input data
 # (RDF::Core::Resource),$values, and a reference to 
 # a SADI::RDF::Core object, $core.
 #
 # Basically, iterate over the the inputs, do your thing
 # and then $core->addOutputData().
 #
[%- IF is_async == 1 %]
 # Since this is an asynchronous implementation of a SADI
 # web service, I am assuming that your task takes a while
 # to run. So to save what you have so far, do store($core).
 #  
[%- ELSE %]
 # Since this is an synchronous implementation of a SADI
 # web service, I am assuming that your task doesn't take
 # long to execute.
 # 
[%- END %]

=head1 DESCRIPTION

[% base.Description %]

=head1 CONTACT

B<Authority>: [% base.Authority %]

B<Email>: [% base.Provider %]

=cut
