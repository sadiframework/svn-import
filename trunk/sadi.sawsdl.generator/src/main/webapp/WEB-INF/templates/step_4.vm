#parse("HEADER.vm")
<h1>Daggoo4SADI</h1>
<p>Now we map the SOAP service input to your SADI service input class</p>
<h2>Input Mapping ($operation)</h2>
<p>Some instructions here ...</p>
<p></p>
<form id="mappingform" name="mappingform" method="post" action="$servlet_action">
#if($soap_inputs.size() != 0)
#set( $soap_input_count = 0 )
#foreach ($item in $soap_inputs)  
  <p>
    <blockquote>
      <fieldset>
        <legend>Soap Input #if(!$required[$soap_input_count])(<i>optional</i>)#end ('<i>$item</i>'):</legend>
        <p>
            <p><i>maps to OWL property</i>: <input type="text" name="${soap_input_count}_owl_property" id="${soap_input_count}_owl_property" doautocomplete2="true" /> 
              <i>with values from OWL class</i>: <input type="text" name="${soap_input_count}_owl_class" id="${soap_input_count}_owl_class" doautocomplete="true" /> 
              <span class="ui-button" num=0 soapid="$item" soap="${soap_input_count}_extra" soapCount=${soap_input_count} type="addRow">+</span>
            </p>
            <blockquote id="${item}_extras" ></blockquote>
        </p>
        <p><i>prefix, if required, for SOAP field</i>: <input type="text" name="${soap_input_count}_soap_prefix" id="${soap_input_count}_soap_prefix" /></p>
        <input type="hidden" name="${soap_input_count}_soap_input" id="${soap_input_count}_soap_input" value="$item" />
        <input type="hidden" name="${soap_input_count}_extra_count" id="${soap_input_count}_extra_count" value="0" />
      </fieldset>    
    </blockquote>
  </p>
#set( $soap_input_count = $soap_input_count + 1 )
#end
#end
    <p>
        <input type="submit" name="submit" id="submit" value="Submit" /> 
    </p>
    <input name="next" type="hidden" id="next" value="true" />
</form>
<p>TODO:
  <ol>
    <li>Luke's autocomplete is attached to the text boxes. We need one to filter for properties, the other for classes.</li>
  </ol>
</p>
<div class="sparqlassist-results" style="display: none; position: absolute;"></div>

<script type="text/javascript">                                         
$(document).ready(function() {
    foobar();
});

function foobar() {

var handler = function () {
        var num = parseInt($(this).attr('num'))
        var soapCount = $(this).attr('soapCount')
        var soap = $(this).attr('soap')
        var soapid = $(this).attr('soapid')
        var blockid = '#' + soapid + '_extras';
        var extraId = sprintf("%s_%d", soapCount, num+1);
        
        if (num > 0) {
            if (jQuery.trim($(sprintf("#%s_%d_owl_property", soapCount, num)).val()) == "") {
                alert("Please enter a valid OWL property before adding more rows");
                $(sprintf("#%s_%d_owl_property", soapCount, num)).focus();
                return;
            }
            if (jQuery.trim($(sprintf("#%s_%d_owl_class", soapCount, num)).val()) == "") {
                alert("Please enter a valid OWL class before adding more rows");
                $(sprintf("#%s_%d_owl_class", soapCount, num)).focus();
                return;
            }
        } else {
            if (jQuery.trim($(sprintf("#%s_owl_property", soapCount)).val()) == "") {
                alert("Please enter a valid OWL property before adding more rows");
                $(sprintf("#%s_owl_property", soapCount)).focus();
                return;
            }
            if (jQuery.trim($(sprintf("#%s_owl_class", soapCount)).val()) == "") {
                alert("Please enter a valid OWL class before adding more rows");
                $(sprintf("#%s_owl_class", soapCount)).focus();
                return;
            }
        }
        // remove the autocomplete attribute
        if (num > 0) {
            $(sprintf("#%s_%d_owl_property", soapCount, num)).removeAttr('doautocomplete2');
            $(sprintf("#%s_%d_owl_class", soapCount, num)).removeAttr('doautocomplete');
        } else {
            $(sprintf("#%s_owl_property", soapCount)).removeAttr('doautocomplete2');
            $(sprintf("#%s_owl_class", soapCount)).removeAttr('doautocomplete');
        }
        var domString = sprintf(
            '<p>' +
            '    <i>maps to OWL property</i>: <input type="text" name="%s_owl_property" id="%s_owl_property" doautocomplete2="true" />' + 
            '    <i>with values from OWL class</i>: <input type="text" name="%s_owl_class" id="%s_owl_class" doautocomplete="true" />' +
            '    <span class="ui-button" num=%d soapid="%s" soapCount=%s soap="%s_extra" type="addRow">+</span>' +
            '</p>', extraId, extraId, extraId, extraId, num+1, soapid, soapCount, extraId)
        
        $(blockid).append($(domString).fadeIn("slow"));
        $(sprintf("#%s_extra_count", soapCount)).val(parseInt($(sprintf("#%s_extra_count", soapCount)).val()) + 1);
        $(this).attr("type","addRowDone").hide();
        foobar();
} // end handler

   $('span[type="addRow"]')
    .unbind('click')
    .bind('click', handler)
    .hover(
        function(){ 
          $(this).addClass("ui-state-hover"); 
        },
        function(){ 
          $(this).removeClass("ui-state-hover"); 
        }
   );
   //autocomplete
     $(function() {
      $('input[doautocomplete]').removeData('autocompleter');
      $('input[doautocomplete]').autocomplete({
          url: "resources/props.json",
          displayValue: function(value, data) { return data.uri; },
          showResult : function(value, data) {
              var item = "<p";
              if (data.uri) {
                  item += " title='" + data.uri + "'";
              }
              item += "><span class='label'>" + data.label + "</span>";
              if (data.description) {
                  item += " <span class='description'>" + data.description + "</span>";
              }
              return item;
          },
          resultsClass : "sparqlassist-results"
      });
      var autocompleter = $('input[doautocomplete]')
        .data('autocompleter');
      autocompleter.parseRemoteData = function(results) {
          if (!(results instanceof Array)) {
              results = eval(results);
          }
          var i, a=[];
          for (i=0; i<results.length; ++i) {
              var result = results[i];
              a.push({ value: result.label, data: result });
          }
          return a;
      };
     });
     //autocomplete
     $(function() {
      $('input[doautocomplete2]').removeData('autocompleter');
      $('input[doautocomplete2]').autocomplete({
          url: "resources/props.json",
          displayValue: function(value, data) { return data.uri; },
          showResult : function(value, data) {
              var item = "<p";
              if (data.uri) {
                  item += " title='" + data.uri + "'";
              }
              item += "><span class='label'>" + data.label + "</span>";
              if (data.description) {
                  item += " <span class='description'>" + data.description + "</span>";
              }
              return item;
          },
          resultsClass : "sparqlassist-results"
      });
      var autocompleter = $('input[doautocomplete2]').data('autocompleter');
      autocompleter.parseRemoteData = function(results) {
          if (!(results instanceof Array)) {
              results = eval(results);
          }
          var i, a=[];
          for (i=0; i<results.length; ++i) {
              var result = results[i];
              a.push({ value: result.label, data: result });
          }
          return a;
      };
     });
}                                    
</script> 

#include("FOOTER.vm")